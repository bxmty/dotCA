name: QA Provision, Build, and Deploy

on:
  push:
    branches:
      - qa

jobs:
  deploy-qa:
    name: Deploy QA Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
          
      - name: Setup DigitalOcean CLI
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.94.0/doctl-1.94.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin/
          doctl auth init -t ${{ secrets.DO_TOKEN }}
      
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
        
      - name: Check if resources exist
        working-directory: ./terraform
        id: check_resources
        run: |
          # Set terraform variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="qa"
          
          # Try to get current state
          terraform refresh
          
          # Check if state file exists and has resources
          if [ -f "terraform.tfstate" ] && grep -q "resources" terraform.tfstate; then
            # Try to get droplet_ip output in a safer way
            DROPLET_IP=$(terraform output droplet_ip | tr -d '"' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
            
            if [ -n "$DROPLET_IP" ]; then
              echo "RESOURCES_EXIST=true" >> $GITHUB_ENV
              echo "resources_exist=true" >> $GITHUB_OUTPUT
              echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
              echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
              echo "Resources already exist, using IP: $DROPLET_IP"
            else
              echo "RESOURCES_EXIST=false" >> $GITHUB_ENV
              echo "resources_exist=false" >> $GITHUB_OUTPUT
              echo "Could not retrieve valid IP address"
            fi
          else
            echo "RESOURCES_EXIST=false" >> $GITHUB_ENV
            echo "resources_exist=false" >> $GITHUB_OUTPUT
            echo "Resources need to be created or updated"
          fi
        continue-on-error: true
        
      - name: Terraform Plan
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        run: |
          # Set terraform variables as environment variables
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="qa"
          
          # Create plan
          terraform plan -out=tfplan
        
      - name: Terraform Apply
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        run: |
          # Set terraform variables as environment variables (needed again in case of job step isolation)
          export TF_VAR_do_token="${{ secrets.DO_TOKEN }}"
          export TF_VAR_ssh_key_fingerprint="${{ secrets.SSH_KEY_FINGERPRINT }}"
          export TF_VAR_git_repo_url="${{ github.server_url }}/${{ github.repository }}.git"
          export TF_VAR_git_branch="qa"
          
          # Apply the plan
          terraform apply -auto-approve tfplan
        
      - name: Capture Droplet IP
        if: env.RESOURCES_EXIST != 'true'
        working-directory: ./terraform
        id: get_ip
        run: |
          # Get terraform output in a safer way
          TERRAFORM_OUTPUT=$(terraform output droplet_ip || echo "")
          
          # Clean and extract IP address using grep
          DROPLET_IP=$(echo "$TERRAFORM_OUTPUT" | tr -d '"' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          
          # Verify we got a valid IP
          if [[ $DROPLET_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Extracted IP: $DROPLET_IP"
            echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
            echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          else
            echo "::error::Failed to extract valid IP from output"
            # Display the raw output for debugging
            echo "Raw terraform output was: $TERRAFORM_OUTPUT"
            exit 1
          fi
          
      - name: Add host key to known hosts
        run: |
          # Get IP address from either the check_resources or get_ip step
          IP_ADDRESS="${{ steps.check_resources.outputs.ip || steps.get_ip.outputs.ip }}"
          
          # Fail if we don't have an IP address
          if [ -z "$IP_ADDRESS" ]; then
            echo "::error::Could not determine server IP address - both resource detection methods failed"
            exit 1
          fi
          
          echo "Connecting to IP: $IP_ADDRESS"
          
          # Only wait if we created new resources
          if [ "${{ env.RESOURCES_EXIST }}" != "true" ]; then
            echo "Waiting for new droplet to be ready..."
            sleep 60
          fi
          
          # Export the IP for the deploy script
          echo "DROPLET_IP=$IP_ADDRESS" >> $GITHUB_ENV
          
          # Add host key to known_hosts
          ssh-keyscan -H $IP_ADDRESS >> ~/.ssh/known_hosts
      
      - name: Deploy using Ansible
        env:
          GIT_REPO_URL: "${{ github.server_url }}/${{ github.repository }}.git"
          SSH_KEY_PATH: "~/.ssh/id_rsa"
          GITHUB_ACTIONS: "true"
        run: |
          # Verify IP address is set in the environment
          if [ -z "$DROPLET_IP" ]; then
            echo "::error::DROPLET_IP environment variable is not set"
            exit 1
          fi
          
          echo "Using Droplet IP: $DROPLET_IP for deployment"
          
          # Set up ansible inventory dynamically
          echo "[qa-server]" > inventory.ini
          echo "$DROPLET_IP ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          cat inventory.ini
          
          # Ensure script is executable
          chmod +x ./deploy.sh
          
          # Run the deployment
          ./deploy.sh qa
      
      - name: QA Deployment Status
        if: success()
        run: |
          # Use the DROPLET_IP from environment
          echo "‚úÖ QA environment has been deployed with Ansible!"
          echo "üåê Access it at http://$DROPLET_IP/"
