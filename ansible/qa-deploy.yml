---
# Ansible playbook for setting up the QA environment for dotca
# This replaces the Terraform bootstrap process

- name: Setup QA environment for dotca
  hosts: digitalocean
  become: true
  vars:
    project_name: dotca-nextjs
    git_repo_url: "{{ lookup('env', 'GIT_REPO_URL') }}"
    git_branch: qa
    app_dir: /app
    public_ip: "{{ ansible_host }}"
    node_version: "18.x"  # LTS version, adjust as needed

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: yes

    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - python3-pip
        state: present
        update_cache: yes

    - name: Add Node.js repository
      shell: curl -fsSL https://deb.nodesource.com/setup_{{ node_version }} | bash -

    - name: Install Node.js and npm
      apt:
        name:
          - nodejs
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Clone the repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}/repo"
        version: "{{ git_branch }}"
        force: yes

    - name: Uninstall pip Docker Compose
      pip:
        name: 
          - docker-compose
        state: absent

    - name: Install Docker Compose via official binary
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create deploy script
      copy:
        dest: "{{ app_dir }}/deploy.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          set -e

          echo "Starting deployment process for dotca QA environment..."
          cd {{ app_dir }}/repo
          echo "Changed to repository directory: {{ app_dir }}/repo"

          # Get the public IP address
          PUBLIC_IP={{ public_ip }}
          echo "Using public IP address: $PUBLIC_IP"

          # Pull latest changes
          echo "Pulling latest changes from {{ git_branch }} branch..."
          git pull origin {{ git_branch }}
          echo "Repository updated successfully."
          
          # Update package-lock.json to ensure it's in sync with package.json
          echo "Updating package-lock.json..."
          npm install --package-lock-only
          echo "package-lock.json updated successfully."

          # Create .env file for docker-compose
          echo "Creating .env file with environment variables..."
          cat > .env << EOF
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://$PUBLIC_IP/api
          NEXT_PUBLIC_ENVIRONMENT=qa
          EOF
          echo ".env file created successfully."

          # Explicitly set Docker socket path
          export DOCKER_HOST=unix:///var/run/docker.sock

          # Deploy with docker-compose
          echo "Deploying with docker-compose..."
          docker-compose down || echo "No existing containers to stop."
          docker-compose build --no-cache
          docker-compose up -d
          
          echo "Deployment completed successfully! Application is now available at http://$PUBLIC_IP"

    - name: Run deploy script
      command: "{{ app_dir }}/deploy.sh"

    - name: Setup firewall (UFW)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'
        - '80'
        - '443'

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny